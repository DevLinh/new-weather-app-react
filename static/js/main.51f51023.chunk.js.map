{"version":3,"sources":["responsive/Device.js","components/SearchCity.js","components/ResultFadeIn.js","components/NotFound.js","components/SmallLabel.js","components/Text.js","components/ForecastHour.js","components/BigLabel.js","components/MediumLabel.js","components/Result.js","components/App.js","serviceWorker.js","index.js"],"names":["size","device","mobileS","mobileM","mobileL","tablet","laptop","laptopL","desktop","SearchBar","styled","form","DetectLocationBotton","button","SearchInput","input","SeachIcon","span","SearchContainer","div","showResult","SearchCity","submit","value","change","locate","onSubmit","type","placeholder","onChange","icon","faSearch","onClick","faMapMarkerAlt","ResultFadeIn","keyframes","NotFoundWrapper","NotFoundIcon","NotFoundText","NotFound","faFrown","SmallLabel","h4","color","weight","fontSize","align","firstToUpperCase","Text","ForecastWrapper","WeatherIcon","img","ForecastHour","props","temp","month","day","hour","iconUrl","src","BigLabel","h2","MediumLabel","h3","Results","LocationWrapper","CurrentWeatherWrapper","TemperatureWrapper","Temperature","WeatherDetailsWrapper","WeatherDetail","Forecast","Result","weather","city","country","date","description","main","sunset","sunrise","humidity","wind","highestTemp","lowestTemp","forecasts","forecast","map","item","key","dt","Math","floor","dt_txt","slice","weatherIcon","faBolt","faCloudRain","faCloudShowersHeavy","faSnowflake","faSun","faCloud","faSmog","AppTitle","h1","showLabel","secondary","WeatherWrapper","App","state","weatherInfo","error","location","handleInputChange","e","setState","target","searchWeather","lat","lon","APIkey","process","Promise","all","fetch","then","res1","res2","ok","json","Error","statusText","data1","data2","currentDate","Date","getDay","getDate","getMonth","sys","toLocaleTimeString","name","temp_max","temp_min","clouds","speed","list","catch","console","log","handleSearchCity","preventDefault","findCoordinates","navigator","geolocation","getCurrentPosition","position","handleSearchByLocate","coords","latitude","longitude","this","Component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.51f51023.chunk.js","sourcesContent":["const size = {\r\n  mobileS: \"320px\",\r\n  mobileM: \"375px\",\r\n  mobileL: \"525px\",\r\n  tablet: \"768px\",\r\n  laptop: \"1024px\",\r\n  laptopL: \"1440px\",\r\n  desktop: \"2560px\"\r\n};\r\n\r\nconst device = {\r\n  mobileS: `(min-width: ${size.mobileS})`,\r\n  mobileM: `(min-width: ${size.mobileM})`,\r\n  mobileL: `(min-width: ${size.mobileL})`,\r\n  tablet: `(min-width: ${size.tablet})`,\r\n  laptop: `(min-width: ${size.laptop})`,\r\n  laptopL: `(min-width: ${size.laptopL})`,\r\n  desktop: `(min-width: ${size.desktop})`\r\n};\r\n\r\nexport default device;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\nimport { faMapMarkerAlt } from \"@fortawesome/free-solid-svg-icons/\";\r\nimport device from \"../responsive/Device\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst SearchBar = styled.form`\r\n  flex-basis: 90%;\r\n  position: relative;\r\n  margin: 0 10px 0 0;\r\n  max-width: 500px;\r\n  transition: 0.8s 0.5s;\r\n  @media ${device.mobileS} {\r\n    margin: 0 5px 0 0;\r\n  }\r\n  @media ${device.laptopL} {\r\n    max-width: 600px;\r\n    flex-basis: 100%;\r\n  }\r\n  @media ${device.desktop} {\r\n    max-width: 700px;\r\n    flex-basis: 100%;\r\n  }\r\n`;\r\n\r\nconst DetectLocationBotton = styled.button`\r\n  display: block;\r\n  position: relative;\r\n  margin: 0;\r\n  width: 39px;\r\n  height: 39px;\r\n  border-radius: 19.5px;\r\n  transition: 0.8s;\r\n  background-color: #ffffff;\r\n  border: none;\r\n  color: #c5c5c5;\r\n  font-size: 17px;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  @media ${device.tablet} {\r\n    width: 42px;\r\n    height: 42px;\r\n    border-radius: 30px;\r\n    font-size: 18px;\r\n  }\r\n  @media ${device.laptop} {\r\n    width: 52px;\r\n    height: 52px;\r\n    border-radius: 30px;\r\n    font-size: 18px;\r\n  }\r\n  &:hover {\r\n    color: #191919;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n      0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    outline: none;\r\n    font-size: 19px;\r\n  }\r\n`;\r\n\r\nconst SearchInput = styled.input`\r\n  width: 100%;\r\n  border: none;\r\n  background-color: #ffffff;\r\n  font-size: 16px;\r\n  padding: 10px 20px 10px 40px;\r\n  color: #c5c4c5;\r\n  transition: 0.2s;\r\n  border-radius: 20px;\r\n  box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1),\r\n    0 2px 4px -1px rgba(0, 0, 0, 0.06);\r\n  &:focus {\r\n    color: #191919;\r\n    box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1),\r\n      0 4px 6px -2px rgba(0, 0, 0, 0.05);\r\n    outline: none;\r\n  }\r\n  @media ${device.tablet} {\r\n    font-size: 18px;\r\n  }\r\n  @media ${device.laptop} {\r\n    padding: 15px 20px 15px 45px;\r\n    border-radius: 30px;\r\n  }\r\n`;\r\n\r\nconst SeachIcon = styled.span`\r\n  display: block;\r\n  position: absolute;\r\n  top: 50%;\r\n  left: 22px;\r\n  transform: translate(-50%, -50%);\r\n  height: 14px;\r\n  width: 14px;\r\n  font-size: 14px;\r\n  color: #c5c5c5;\r\n  @media ${device.tablet} {\r\n    height: 15px;\r\n    width: 15px;\r\n    font-size: 15px;\r\n  }\r\n  @media ${device.laptop} {\r\n    height: 16px;\r\n    width: 16px;\r\n    font-size: 16px;\r\n  }\r\n`;\r\n\r\nconst SearchContainer = styled.div`\r\n  top: ${({ showResult }) => (showResult ? \"0%\" : \"30%\")};\r\n  transition: 0.8s 0.5s;\r\n  max-width: 1500px;\r\n  align-items: center;\r\n  display: flex;\r\n  flex-wrap: nowrap;\r\n  justify-content: center;\r\n  padding: 0;\r\n  position: relative;\r\n  flex-direction: row;\r\n  flex-basis: auto;\r\n`;\r\n\r\nconst SearchCity = ({ submit, value, change, showResult, locate }) => {\r\n  return (\r\n    <>\r\n      <SearchContainer showResult={showResult}>\r\n        <SearchBar onSubmit={submit}>\r\n          <SearchInput\r\n            type=\"text\"\r\n            value={value}\r\n            placeholder=\"Enter City\"\r\n            onChange={change}\r\n          />\r\n          <SeachIcon>\r\n            <FontAwesomeIcon icon={faSearch} />\r\n          </SeachIcon>\r\n        </SearchBar>\r\n        <DetectLocationBotton onClick={locate}>\r\n          <FontAwesomeIcon icon={faMapMarkerAlt} />\r\n        </DetectLocationBotton>\r\n      </SearchContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nSearchCity.propTypes = {\r\n  submit: PropTypes.func.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  change: PropTypes.func.isRequired,\r\n  showResult: PropTypes.bool.isRequired,\r\n};\r\n\r\nexport default SearchCity;\r\n","import { keyframes } from \"styled-components\";\r\n\r\nconst ResultFadeIn = keyframes`\r\n    to {\r\n        opacity: 1;\r\n        visibility: visible;\r\n        top: 0\r\n    }\r\n`;\r\n\r\nexport default ResultFadeIn;\r\n","import React from \"react\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faFrown } from \"@fortawesome/free-solid-svg-icons\";\r\nimport styled from \"styled-components\";\r\nimport ResultFadeIn from \"./ResultFadeIn\";\r\n\r\nconst NotFoundWrapper = styled.div`\r\n  max-width: 600px;\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  margin: 100px auto 0;\r\n  padding: 20px;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  position: relative;\r\n  border-radius: 10px;\r\n  top: 20px;\r\n  background-color: rgba(255, 255, 255, 0.3);\r\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\r\n`;\r\n\r\nconst NotFoundIcon = styled.span`\r\n  display: block;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  font-size: 40px;\r\n  margin-right: 10px;\r\n`;\r\n\r\nconst NotFoundText = styled.span`\r\n  color: #ffffff;\r\n  font-size: 17px;\r\n`;\r\n\r\nconst NotFound = () => {\r\n  return (\r\n    <NotFoundWrapper>\r\n      <NotFoundIcon>\r\n        <FontAwesomeIcon icon={faFrown} />\r\n      </NotFoundIcon>\r\n      <NotFoundText>Oops!!, the specified city was not found.</NotFoundText>\r\n    </NotFoundWrapper>\r\n  );\r\n};\r\n\r\nexport default NotFound;\r\n","import styled from \"styled-components\";\r\nimport device from \"../responsive/Device\";\r\n\r\nconst SmallLabel = styled.h4`\r\n    color: ${({ color }) => color || \"#FFFFFF\"};\r\n\r\n    display: block;\r\n    font-weight: ${({ weight }) => weight || \"600\"};\r\n    font-size: ${({ fontSize }) => fontSize || \"15px\"};\r\n    text-align: ${({ align }) => align || \"left\"};\r\n\r\n    ${({ firstToUpperCase }) =>\r\n      firstToUpperCase &&\r\n      `\r\n        $:first-letter {\r\n            text-transform: uppercase;\r\n        }\r\n        `}\r\n\r\n    @media ${device.tablet} {\r\n        font-size: ${({ fontSize }) => fontSize || \"20px\"};\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: ${({ fontSize }) => fontSize || \"23px\"};\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: ${({ fontSize }) => fontSize || \"26px\"};\r\n    }  \r\n`;\r\n\r\nexport default SmallLabel;\r\n","import styled from \"styled-components\";\r\nimport device from \"../responsive/Device\";\r\n\r\nconst Text = styled.span`\r\n    color: ${({ color }) => color || \"#FFFFFF\"};\r\n\r\n    display: block;\r\n    font-size: ${({ fontSize }) => fontSize || \"12px\"};\r\n    text-align: ${({ align }) => align || \"left\"};\r\n\r\n    ${({ firstToUpperCase }) =>\r\n      firstToUpperCase &&\r\n      `\r\n        $:first-letter {\r\n            text-transform: uppercase;\r\n        }\r\n        `}\r\n\r\n    @media ${device.tablet} {\r\n        font-size: ${({ fontSize }) => fontSize || \"15px\"};\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: ${({ fontSize }) => fontSize || \"17px\"};\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: ${({ fontSize }) => fontSize || \"19px\"};\r\n    }\r\n`;\r\n\r\nexport default Text;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\nimport PropTypes from \"prop-types\";\r\nimport SmallLabel from \"./SmallLabel\";\r\nimport Text from \"./Text\";\r\nimport device from \"../responsive/Device\";\r\n\r\nconst ForecastWrapper = styled.div`\r\n  flex-shrink: 0;\r\n  flex-basis: 90px;\r\n  padding: 10px;\r\n  margin: 0 5px;\r\n  border-radius: 5px;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  &:first-child {\r\n    margin-left: 0;\r\n  }\r\n  &:last-child {\r\n    margin-roght: 0;\r\n  }\r\n  @media ${device.tablet} {\r\n    flex-basis: 110px;\r\n  }\r\n  @media ${device.laptop} {\r\n    flex-basis: 125px;\r\n  }\r\n  @media ${device.laptopL} {\r\n    flex-basis: 140px;\r\n  }\r\n`;\r\n\r\nconst WeatherIcon = styled.img`\r\n  display: block;\r\n  height: 50px;\r\n  width: 50px;\r\n  margin: 0 auto;\r\n`;\r\n\r\nconst ForecastHour = props => {\r\n  const { temp, month, day, hour, icon } = props;\r\n  const iconUrl = `https://openweathermap.org/img/w/${icon}.png`;\r\n\r\n  return (\r\n    <ForecastWrapper>\r\n      <Text align=\"center\">\r\n        {month}.{day}\r\n      </Text>\r\n      <Text align=\"center\">{hour}:00</Text>\r\n      <WeatherIcon src={iconUrl} />\r\n      <SmallLabel align=\"center\" weight=\"400\">\r\n        {temp}&#176;C\r\n      </SmallLabel>\r\n    </ForecastWrapper>\r\n  );\r\n};\r\n\r\nForecastHour.propTypes = {\r\n  temp: PropTypes.number.isRequired,\r\n  month: PropTypes.string.isRequired,\r\n  day: PropTypes.string.isRequired,\r\n  hour: PropTypes.number.isRequired,\r\n  icon: PropTypes.string.isRequired\r\n};\r\n\r\nexport default ForecastHour;\r\n","import styled from \"styled-components\";\r\nimport device from \"../responsive/Device\";\r\n\r\nconst BigLabel = styled.h2`\r\n    color: ${({ color }) => color || \"#FFFFFF\"};\r\n\r\n    display: block;\r\n    font-weight: ${({ weight }) => weight || \"600\"};\r\n    font-size: ${({ fontSize }) => fontSize || \"30px\"};\r\n    text-align: ${({ align }) => align || \"left\"};\r\n\r\n    ${({ firstToUpperCase }) =>\r\n      firstToUpperCase &&\r\n      `\r\n        $:first-letter {\r\n            text-transform: uppercase;\r\n        }\r\n        `}\r\n\r\n    @media ${device.tablet} {\r\n        font-size: ${({ fontSize }) => fontSize || \"37px\"};\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: ${({ fontSize }) => fontSize || \"43px\"};\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: ${({ fontSize }) => fontSize || \"52px\"};\r\n    }  \r\n`;\r\n\r\nexport default BigLabel;\r\n","import styled from \"styled-components\";\r\nimport device from \"../responsive/Device\";\r\n\r\nconst MediumLabel = styled.h3`\r\n    color: ${({ color }) => color || \"#FFFFFF\"};\r\n\r\n    display: block;\r\n    font-weight: ${({ weight }) => weight || \"600\"};\r\n    font-size: ${({ fontSize }) => fontSize || \"20px\"};\r\n    text-align: ${({ align }) => align || \"left\"};\r\n\r\n    ${({ firstToUpperCase }) =>\r\n      firstToUpperCase &&\r\n      `\r\n        $:first-letter {\r\n            text-transform: uppercase;\r\n        }\r\n        `}\r\n\r\n    @media ${device.tablet} {\r\n        font-size: ${({ fontSize }) => fontSize || \"23px\"};\r\n    }\r\n    @media ${device.laptop} {\r\n        font-size: ${({ fontSize }) => fontSize || \"26px\"};\r\n    }\r\n    @media ${device.laptopL} {\r\n        font-size: ${({ fontSize }) => fontSize || \"29px\"};\r\n    }  \r\n`;\r\n\r\nexport default MediumLabel;\r\n","import React from \"react\";\r\nimport \"./Result.sass\";\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport {\r\n  faCloud,\r\n  faBolt,\r\n  faCloudRain,\r\n  faCloudShowersHeavy,\r\n  faSnowflake,\r\n  faSun,\r\n  faSmog,\r\n} from \"@fortawesome/free-solid-svg-icons\";\r\nimport styled from \"styled-components\";\r\nimport device from \"../responsive/Device\";\r\nimport ForecastHour from \"./ForecastHour\";\r\nimport ResultFadeIn from \"./ResultFadeIn\";\r\nimport BigLabel from \"./BigLabel\";\r\nimport MediumLabel from \"./MediumLabel\";\r\nimport SmallLabel from \"./SmallLabel\";\r\nimport Text from \"./Text\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nconst Results = styled.div`\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  justify-content: space-between;\r\n  padding: 40px 0;\r\n  opacity: 0;\r\n  visibility: hidden;\r\n  position: relative;\r\n  top: 20px;\r\n  animation: ${ResultFadeIn} 0.5s 1.4s forwards;\r\n`;\r\n\r\nconst LocationWrapper = styled.div`\r\n  flex-basis: 100%;\r\n`;\r\n\r\nconst CurrentWeatherWrapper = styled.div`\r\n  flex-basis: 100%;\r\n  display: grid;\r\n  justify-content: center;\r\n  align-items: center;\r\n  grid-template-columns: auto 1fr;\r\n  margin: 20px 0;\r\n  grid-gap: 30px;\r\n  @media ${device.mobileL} {\r\n    flex-basis: 50%;\r\n    padding-right: 10px;\r\n  }\r\n  @media ${device.tablet} {\r\n    grid-template-columns: 1fr 1fr;\r\n    padding-right: 20px;\r\n  }\r\n`;\r\n\r\nconst WeatherIcon = styled.div`\r\n  display: flex;\r\n  justify-content: center;\r\n  align-items: center;\r\n  font-size: 70px;\r\n  color: #ffffff;\r\n  @media ${device.tablet} {\r\n    font-size: 100px;\r\n    justify-content: flex-end;\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: 120px;\r\n  }\r\n  @media ${device.laptopL} {\r\n    font-size: 140px;\r\n  }\r\n`;\r\n\r\nconst TemperatureWrapper = styled.div``;\r\n\r\nconst Temperature = styled.h3`\r\n  display: block;\r\n  font-size: 50px;\r\n  font-weight: 400;\r\n  color: #ffffff;\r\n  @media ${device.tablet} {\r\n    font-size: 70px;\r\n  }\r\n  @media ${device.laptop} {\r\n    font-size: 90px;\r\n  }\r\n  @media ${device.laptopL} {\r\n    font-size: 110px;\r\n  }\r\n`;\r\n\r\nconst WeatherDetailsWrapper = styled.div`\r\n  flex-basis: 100%;\r\n  display: flex;\r\n  flex-wrap: wrap;\r\n  padding: 10px 0;\r\n  margin: 20px 0;\r\n  background-color: rgba(255, 255, 255, 0.2);\r\n  border-radius: 10px;\r\n  align-self: flex-start;\r\n  @media ${device.mobileL} {\r\n    flex-basis: 50%;\r\n  }\r\n`;\r\n\r\nconst WeatherDetail = styled.div`\r\n  flex-basis: calc(100% / 3);\r\n  padding: 10px;\r\n  @media ${device.laptop} {\r\n    padding: 20px 10px;\r\n  }\r\n`;\r\n\r\nconst ForecastWrapper = styled.div`\r\n  flex-basis: 100%;\r\n  margin: 20px 0;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst Forecast = styled.div`\r\n  position: relative;\r\n  display: flex;\r\n  overflow-x: scroll;\r\n  overflow-y: hidden;\r\n  scrollbar-color: #c4c4c4 #ffffff;\r\n  scrollbar-width: thin;\r\n  margin-top: 20px;\r\n  padding-bottom: 20px;\r\n  @media ${device.laptop} {\r\n    order: 4;\r\n  }\r\n`;\r\n\r\nconst Result = ({ weather }) => {\r\n  const {\r\n    city,\r\n    country,\r\n    date,\r\n    description,\r\n    main,\r\n    temp,\r\n    sunset,\r\n    sunrise,\r\n    humidity,\r\n    wind,\r\n    highestTemp,\r\n    lowestTemp,\r\n    forecast,\r\n  } = weather;\r\n\r\n  const forecasts = forecast.map((item) => (\r\n    <ForecastHour\r\n      key={item.dt}\r\n      temp={Math.floor(item.main.temp * 1) / 1}\r\n      icon={item.weather[0].icon}\r\n      month={item.dt_txt.slice(5, 7)}\r\n      day={item.dt_txt.slice(8, 10)}\r\n      hour={item.dt_txt.slice(11, 13) * 1}\r\n    />\r\n  ));\r\n\r\n  let weatherIcon = null;\r\n\r\n  if (main === \"Thunderstorm\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faBolt} />;\r\n  } else if (main === \"Drizzle\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudRain} />;\r\n  } else if (main === \"Rain\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloudShowersHeavy} />;\r\n  } else if (main === \"Snow\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faSnowflake} />;\r\n  } else if (main === \"Clear\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faSun} />;\r\n  } else if (main === \"Clouds\") {\r\n    weatherIcon = <FontAwesomeIcon icon={faCloud} />;\r\n  } else {\r\n    weatherIcon = <FontAwesomeIcon icon={faSmog} />;\r\n  }\r\n\r\n  return (\r\n    <Results>\r\n      <LocationWrapper>\r\n        <BigLabel>\r\n          {city}, {country}\r\n        </BigLabel>\r\n        <SmallLabel weight=\"400\">{date}</SmallLabel>\r\n      </LocationWrapper>\r\n      <CurrentWeatherWrapper>\r\n        <WeatherIcon>{weatherIcon}</WeatherIcon>\r\n        <TemperatureWrapper>\r\n          <Temperature>{Math.floor(temp)}&#176;C</Temperature>\r\n          <SmallLabel weight=\"400\" firstToUpperCase>\r\n            {description}\r\n          </SmallLabel>\r\n        </TemperatureWrapper>\r\n      </CurrentWeatherWrapper>\r\n      <WeatherDetailsWrapper>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {Math.floor(highestTemp)}&#176;C\r\n          </SmallLabel>\r\n          <Text align=\"center\">Highest</Text>\r\n        </WeatherDetail>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {wind} mph\r\n          </SmallLabel>\r\n          <Text align=\"center\">Wind</Text>\r\n        </WeatherDetail>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {sunrise}\r\n          </SmallLabel>\r\n          <Text align=\"center\">Sunrise</Text>\r\n        </WeatherDetail>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {Math.floor(lowestTemp)}&#176;C\r\n          </SmallLabel>\r\n          <Text align=\"center\">Low</Text>\r\n        </WeatherDetail>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {humidity}%\r\n          </SmallLabel>\r\n          <Text align=\"center\">Rain</Text>\r\n        </WeatherDetail>\r\n        <WeatherDetail>\r\n          <SmallLabel align=\"center\" weight=\"400\">\r\n            {sunset}\r\n          </SmallLabel>\r\n          <Text align=\"center\">Sunset</Text>\r\n        </WeatherDetail>\r\n      </WeatherDetailsWrapper>\r\n      <ForecastWrapper>\r\n        <MediumLabel weight=\"400\">Forecast</MediumLabel>\r\n        <Forecast>{forecasts}</Forecast>\r\n      </ForecastWrapper>\r\n    </Results>\r\n  );\r\n};\r\n\r\nResult.propTypes = {\r\n  weather: PropTypes.shape({\r\n    city: PropTypes.string,\r\n    country: PropTypes.string,\r\n    date: PropTypes.string,\r\n    description: PropTypes.string,\r\n    main: PropTypes.string,\r\n    temp: PropTypes.number,\r\n    sunrise: PropTypes.string,\r\n    sunset: PropTypes.string,\r\n    humidity: PropTypes.number,\r\n    wind: PropTypes.number,\r\n    highestTemp: PropTypes.number,\r\n    lowestTemp: PropTypes.number,\r\n    forecast: PropTypes.array,\r\n  }).isRequired,\r\n};\r\n\r\nexport default Result;\r\n","import React, { Component } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport SearchCity from \"./SearchCity\";\r\nimport NotFound from \"./NotFound\";\r\nimport device from \"../responsive/Device\";\r\nimport Result from \"./Result\";\r\n\r\nconst AppTitle = styled.h1`\r\n  display: block;\r\n  height: 64px;\r\n  margin: 0;\r\n  padding: 20px 0;\r\n  font-size: 20px;\r\n  text-transform: uppercase;\r\n  font-weight: 400px;\r\n  color: #ffffff;\r\n  transition: 0.3s 1.4s;\r\n  opacity: ${({ showLabel }) => (showLabel ? 1 : 0)};\r\n\r\n  ${({ secondary }) =>\r\n    secondary &&\r\n    `\r\n    opacity: 1;\r\n    height: auto;\r\n    position: relative;\r\n    padding: 20px 0;\r\n    font-size: 30px;\r\n    top: 20%;\r\n    text-align: center;\r\n    transition: 0.5s;\r\n    @media ${device.tablet} {\r\n      font-size: 40px;\r\n    }\r\n    @media ${device.laptop} {\r\n      font-size: 50px;\r\n    }\r\n    @media ${device.laptopL} {\r\n      font-size: 60px;\r\n    }\r\n    @media ${device.desktop} {\r\n      font-size: 70px;\r\n    }\r\n      `}\r\n\r\n  ${({ showResult }) =>\r\n    showResult &&\r\n    `\r\n    opacity: 0;\r\n    visibility: hidden;\r\n    top: 10%;\r\n  `}\r\n`;\r\n\r\nconst WeatherWrapper = styled.div`\r\n  max-width: 1500px;\r\n  margin: 0 auto;\r\n  height: calc(100vh - 64px);\r\n  width: 100%;\r\n  position: relative;\r\n`;\r\nclass App extends Component {\r\n  state = {\r\n    value: \"\",\r\n    weatherInfo: null,\r\n    error: false,\r\n    location: null,\r\n  };\r\n\r\n  handleInputChange = (e) => {\r\n    this.setState({\r\n      value: e.target.value,\r\n    });\r\n  };\r\n\r\n  searchWeather = (type, lat, lon, value) => {\r\n    const APIkey = process.env.REACT_APP_API_KEY;\r\n    //const { value } = this.state;\r\n\r\n    var weather = \"\";\r\n    var forecast = \"\";\r\n    if (type === \"city\") {\r\n      weather = `https://api.openweathermap.org/data/2.5/weather?q=${value}&APPID=${APIkey}&units=metric`;\r\n      forecast = `https://api.openweathermap.org/data/2.5/forecast?q=${value}&APPID=${APIkey}&units=metric`;\r\n    } else if (type === \"position\") {\r\n      weather = `https://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&APPID=${APIkey}&units=metric`;\r\n      forecast = `https://api.openweathermap.org/data/2.5/forecast?lat=${lat}&lon=${lon}&APPID=${APIkey}&units=metric`;\r\n    }\r\n\r\n    Promise.all([fetch(weather), fetch(forecast)])\r\n      .then(([res1, res2]) => {\r\n        if (res1.ok && res2.ok) {\r\n          return Promise.all([res1.json(), res2.json()]);\r\n        }\r\n        throw Error(res1.statusText, res2.statusText);\r\n      })\r\n      .then(([data1, data2]) => {\r\n        const months = [\r\n          \"January\",\r\n          \"February\",\r\n          \"March\",\r\n          \"April\",\r\n          \"May\",\r\n          \"June\",\r\n          \"July\",\r\n          \"August\",\r\n          \"September\",\r\n          \"October\",\r\n          \"Nocvember\",\r\n          \"December\",\r\n        ];\r\n        const days = [\r\n          \"Sunday\",\r\n          \"Monday\",\r\n          \"Tuesday\",\r\n          \"Wednesday\",\r\n          \"Thursday\",\r\n          \"Friday\",\r\n          \"Saturday\",\r\n        ];\r\n        const currentDate = new Date();\r\n        const date = `${days[currentDate.getDay()]} ${currentDate.getDate()} ${\r\n          months[currentDate.getMonth()]\r\n        }`;\r\n\r\n        const sunset = new Date(data1.sys.sunset * 1000)\r\n          .toLocaleTimeString()\r\n          .slice(0, 5);\r\n        const sunrise = new Date(data1.sys.sunrise * 1000)\r\n          .toLocaleTimeString()\r\n          .slice(0, 5);\r\n\r\n        const weatherInfo = {\r\n          city: data1.name,\r\n          country: data1.sys.country,\r\n          date,\r\n          description: data1.weather[0].description,\r\n          main: data1.weather[0].main,\r\n          temp: data1.main.temp,\r\n          highestTemp: data1.main.temp_max,\r\n          lowestTemp: data1.main.temp_min,\r\n          sunset,\r\n          sunrise,\r\n          clouds: data1.clouds.all,\r\n          humidity: data1.main.humidity,\r\n          wind: data1.wind.speed,\r\n          forecast: data2.list,\r\n        };\r\n\r\n        this.setState({\r\n          weatherInfo,\r\n          error: false,\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        console.log(error);\r\n\r\n        this.setState({\r\n          error: true,\r\n          weatherInfo: null,\r\n        });\r\n      });\r\n  };\r\n\r\n  handleSearchCity = (e) => {\r\n    e.preventDefault();\r\n    this.searchWeather(\"city\", null, null, this.state.value);\r\n  };\r\n\r\n  findCoordinates = () => {\r\n    navigator.geolocation.getCurrentPosition((position) => {\r\n      //const location = JSON.stringify(position);\r\n      this.setState({ location: position });\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.findCoordinates();\r\n  }\r\n\r\n  handleSearchByLocate = (e) => {\r\n    e.preventDefault();\r\n    this.searchWeather(\r\n      \"position\",\r\n      this.state.location.coords.latitude,\r\n      this.state.location.coords.longitude,\r\n      null\r\n    );\r\n  };\r\n\r\n  render() {\r\n    const { value, weatherInfo, error } = this.state;\r\n    return (\r\n      <>\r\n        <AppTitle showLabel={(weatherInfo || error) && true}>\r\n          Weather app\r\n        </AppTitle>\r\n        {/* <AppTitle showLabel={true}>Weather app</AppTitle> */}\r\n        <WeatherWrapper>\r\n          <AppTitle secondary showResult={(weatherInfo || error) && true}>\r\n            Weather app\r\n          </AppTitle>\r\n          <SearchCity\r\n            value={value}\r\n            showResult={(weatherInfo || error) && true}\r\n            change={this.handleInputChange}\r\n            submit={this.handleSearchCity}\r\n            locate={this.handleSearchByLocate}\r\n          />\r\n          {weatherInfo && <Result weather={weatherInfo} />}\r\n          {error && <NotFound error={error} />}\r\n        </WeatherWrapper>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.sass\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}